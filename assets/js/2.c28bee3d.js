(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{394:function(t,v,i){t.exports=i.p+"assets/img/git1.209e143c.png"},395:function(t,v,i){t.exports=i.p+"assets/img/git2.e1ff72a9.png"},396:function(t,v,i){t.exports=i.p+"assets/img/git3.e159bac5.jpg"},397:function(t,v,i){t.exports=i.p+"assets/img/git4.4898737b.png"},398:function(t,v,i){t.exports=i.p+"assets/img/git5.cb1a967b.png"},399:function(t,v,i){t.exports=i.p+"assets/img/git6.33ca2074.png"},400:function(t,v,i){t.exports=i.p+"assets/img/git7.9cd62b34.png"},401:function(t,v,i){t.exports=i.p+"assets/img/git8.a84ef23c.png"},402:function(t,v,i){t.exports=i.p+"assets/img/git9.6f95b8de.png"},403:function(t,v,i){t.exports=i.p+"assets/img/git10.8056c812.png"},404:function(t,v,i){t.exports=i.p+"assets/img/git11.5d8d13ed.png"},405:function(t,v,i){t.exports=i.p+"assets/img/git12.a61b95a4.png"},432:function(t,v,i){"use strict";i.r(v);var e=i(0),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),e("p",[t._v("检查现有SSH密钥：https://docs.github.com/cn/github/authenticating-to-github/checking-for-existing-ssh-keys")]),t._v(" "),e("p",[t._v("生成新 SSH 密钥并添加到 ssh-agent：https://docs.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent")]),t._v(" "),e("p",[t._v("新增SSH密钥到GitHub账户：https://docs.github.com/cn/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account")]),t._v(" "),e("p",[e("strong",[t._v("小结(在github里面可以看到命令提示）")])]),t._v(" "),e("p",[t._v("要关联一个远程库，使用命令")]),t._v(" "),e("div",{staticClass:"language-nginx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[t._v("git remote add origin git@server-name:path/repo-name.git；\n")])])]),e("p",[t._v("关联后，使用命令"),e("code",[t._v("git push -u origin main")]),t._v(" 第一次推送master分支的所有内容；")]),t._v(" "),e("p",[t._v("此后，每次本地提交后，只要有必要，就可以使用命令"),e("code",[t._v("git push origin master")]),t._v("推送最新修改；")]),t._v(" "),e("p",[t._v("克隆远程仓库")]),t._v(" "),e("p",[e("img",{attrs:{src:i(394),alt:"git1"}})]),t._v(" "),e("p",[e("strong",[t._v("小结")])]),t._v(" "),e("p",[t._v("要克隆一个仓库，首先必须知道仓库的地址，然后使用"),e("code",[t._v("git clone")]),t._v("命令克隆。")]),t._v(" "),e("p",[t._v("Git支持多种协议，包括https，但ssh协议速度最快")]),t._v(" "),e("h2",{attrs:{id:"分支管理-创建合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理-创建合并分支"}},[t._v("#")]),t._v(" 分支管理 创建合并分支")]),t._v(" "),e("p",[t._v("一开始HEAD  指针指向的是main，也就是主分支。HEAD指向的是当前分支。而main才是指向提交的。")]),t._v(" "),e("p",[t._v("我们创建一个新的分支dev，指向跟main相同的提交，再把HEAD的指针指向dev（也就是分支）。现在对工作区的修改和提交都是针对dev分支，提交一次，dev指针往前一次，而main的指针不动。dev工作完成之后，就可以把dev和main合并，方法就是将main的指针指向dev当前的提交，完成合并。然后可以删除dev。")]),t._v(" "),e("p",[t._v("实战：")]),t._v(" "),e("p",[t._v("首先创建分支dev，两种方式：")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b dev")])]),t._v(" "),e("p",[e("img",{attrs:{src:i(395),alt:"git2"}})]),t._v(" "),e("p",[t._v("相当于：")]),t._v(" "),e("p",[e("code",[t._v("git branch dev")])]),t._v(" "),e("p",[e("code",[t._v("git checkuot dev")])]),t._v(" "),e("p",[t._v("还有一种方式 也是更科学的方式：")]),t._v(" "),e("p",[t._v("创建并切换到新的dev分支："),e("code",[t._v("git switch -c dev")])]),t._v(" "),e("p",[t._v("直接切换到已有的分支，常用在main上："),e("code",[t._v("git switch main")])]),t._v(" "),e("p",[t._v("然后，用git branch查看当前分支：当前分支前面有*")]),t._v(" "),e("p",[e("img",{attrs:{src:i(396),alt:"git3"}})]),t._v(" "),e("p",[t._v("然后，对分支上的文件进行一次修改，并且提交")]),t._v(" "),e("p",[e("img",{attrs:{src:i(397),alt:"git4"}})]),t._v(" "),e("p",[t._v("然后，把指针指向main：")]),t._v(" "),e("p",[e("code",[t._v("git checkout main/git switch main")])]),t._v(" "),e("p",[e("img",{attrs:{src:i(398),alt:"git5"}})]),t._v(" "),e("p",[t._v("但是因为没有合并，所以没能看到dev上面的修改，我们进行合并：")]),t._v(" "),e("p",[e("code",[t._v("git merge dev")])]),t._v(" "),e("p",[t._v("gitmerge命令用于合并指定分支到当前分支。")]),t._v(" "),e("p",[e("img",{attrs:{src:i(399),alt:"git6"}})]),t._v(" "),e("p",[t._v("合并之后就可以放心删除dev分支")]),t._v(" "),e("p",[e("code",[t._v("git branch -d dev")])]),t._v(" "),e("p",[e("img",{attrs:{src:i(400),alt:"git7"}})]),t._v(" "),e("p",[e("img",{attrs:{src:i(401),alt:"git8"}})]),t._v(" "),e("p",[e("strong",[t._v("小结")])]),t._v(" "),e("p",[t._v("Git鼓励大量使用分支：")]),t._v(" "),e("p",[t._v("查看分支："),e("code",[t._v("git branch")])]),t._v(" "),e("p",[t._v("创建分支："),e("code",[t._v("git branch <name>")])]),t._v(" "),e("p",[t._v("切换分支："),e("code",[t._v("git checkout <name>")]),t._v("或者 "),e("code",[t._v("git switch <name>")])]),t._v(" "),e("p",[t._v("创建+切换分支："),e("code",[t._v("git checkout -b <name>")]),t._v("或者"),e("code",[t._v("git switch -c <name>")])]),t._v(" "),e("p",[t._v("合并某分支到当前分支："),e("code",[t._v("git merge <name>")])]),t._v(" "),e("p",[t._v("删除分支："),e("code",[t._v("git branch -d <name>")])]),t._v(" "),e("h2",{attrs:{id:"解决冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),e("p",[t._v("我们创建一个devv分支，在上面修改并且提交了文件")]),t._v(" "),e("p",[e("img",{attrs:{src:i(402),alt:"git9"}})]),t._v(" "),e("p",[t._v("然后，将指针指向main分支，也修改了文件（相同位置不同内容）")]),t._v(" "),e("p",[e("img",{attrs:{src:i(403),alt:"git10"}})]),t._v(" "),e("p",[t._v("在合并分支时，报错，git告诉我们文件冲突，需要手动解决")]),t._v(" "),e("p",[e("img",{attrs:{src:i(404),alt:"git11"}})]),t._v(" "),e("p",[t._v("直接进入文件修改并提交（git add 和 git commit)，之后查看分支合并情况：")]),t._v(" "),e("p",[e("img",{attrs:{src:i(405),alt:"git12"}})]),t._v(" "),e("p",[t._v("最后删除分支devv。")]),t._v(" "),e("p",[t._v("git branch -d devv")]),t._v(" "),e("p",[e("strong",[t._v("小结")])]),t._v(" "),e("p",[t._v("当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。")]),t._v(" "),e("p",[t._v("解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。")]),t._v(" "),e("p",[t._v("用git log --graph命令可以看到分支合并图。")])])}),[],!1,null,null,null);v.default=s.exports}}]);